shiny::runApp('Desktop/COLUMBIA/Intro to Databases/Project 1')
shiny::runApp('Desktop/COLUMBIA/Intro to Databases/Project 1/deploy-folder')
shiny::runApp('Desktop/COLUMBIA/Intro to Databases/Project 1/deploy-folder')
shiny::runApp('Desktop/COLUMBIA/Intro to Databases/Project 1/deploy-folder')
shiny::runApp('Desktop/COLUMBIA/Intro to Databases/Project 1/deploy-folder')
shiny::runApp('Desktop/COLUMBIA/Intro to Databases/Project 1/deploy-folder')
shiny::runApp('Desktop/COLUMBIA/Intro to Databases/Project 1/deploy-folder')
shiny::runApp('Desktop/COLUMBIA/Intro to Databases/Project 1/deploy-folder')
shiny::runApp('Desktop/COLUMBIA/Intro to Databases/Project 1/deploy-folder')
shiny::runApp('Desktop/COLUMBIA/Intro to Databases/Project 1/deploy-folder')
scan(x)
scan()
?scna
?scan
?scan
scan(n = 1)
x <- scan(n = 1)
attach(Boston)
library(ISLR)
attach(Boston)
library(MASS)
attach(Boston)
fit <- lm.fit(crim, zn)
fit <- lm.fit(~crim, zn)
fit <- lm.fit(Auto[,-1], Auto[,1]
)
(c) *False.* Coefficient measures the strength of the relationship, not its statistical significance. Interaction effect evidences should be examined through p-values and respective tests.
library(MASS)
class(Boston)
lapply(Boston, class)
sapply(Boston, class)
lm.fit(x = Boston[,2], y = Boston[,1])
lm.fit(x = as.matrix(Boston[,2]), y = Boston[,1])
lm(crim ~ ., data = Boston[,c])
names(Boston)
y <- rnorm(100)
x <- rnorm(100)
fit <- lm(y ~ x)
names(fit)
fit$qr
summary(fit)
fit$effects
fit$rank
fit$terms
fit$model
fit$call
fit$assign
fit$xlevels
fit$fitted.values
summary(fit)$r.squared
lm.fit3 <- lm(log(mpg) ~ log(weight)+sqrt(horsepower)+acceleration+I(acceleration^2),
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ .,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ .-name,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ cylinders + displacement +
horsepower + weight + sqrt(acceleration) + year,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ cylinders + displacement +
horsepower + weight + I(acceleration^2) + year,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ cylinders + displacement +
horsepower + weight + log(acceleration) + year,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ cylinders + displacement +
horsepower + weight + year,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ cylinders + sqrt(displacement) +
horsepower + weight + year,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ cylinders + log(displacement) +
horsepower + weight + year,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ log(cylinders) + log(displacement) +
horsepower + weight + year,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ sqrt(cylinders) + log(displacement) +
horsepower + weight + year,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ I(cylinders^2) + log(displacement) +
horsepower + weight + year,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ I(cylinders^2) + log(displacement) +
log(horsepower) + weight + year,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ sqrt(cylinders) + log(displacement) +
log(horsepower) + weight + year,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ log(displacement) +
log(horsepower) + weight + year,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ log(displacement) +
log(horsepower) + log(weight) + year,
data = Auto)
summary(lm.fit3)
lm.fit3 <- lm(log(mpg) ~ log(displacement) +
log(horsepower) + weight + year,
data = Auto)
summary(lm.fit3)
library(ISLR)
library(MASS)
plot(lm(chas ~ ., data = Boston))
library(MASS)
summary(Boston)
Boston$crime = sapply(Boston$crim, function(x) {ifelse(x > median(Boston$crim), 1, 0)})
#splitting into train and test (80:20)
train = sample(nrow(Boston), size = floor(nrow(Boston) * 0.8))
trainSet = Boston[train,]
testSet = Boston[!train,]
print(train)
nrow(Boston)
nrow(Boston)*0.8
glm.fit = glm(crime ~ . - crim, data = trainSet, family = binomial)
summary(glm.fit)
glm.probs = predict(glm.fit, newdata = testSet, type = "response")
glm.probs = predict(glm.fit, newdata = Boston[!train,], type = "response")
glm.probs = predict(glm.fit, newdata = testSet, type = "response")
glm.probs = predict(glm.fit, newdata = testSet[,-"crim"], type = "response")
glm.probs = predict(glm.fit, newdata = trainSet, type = "response")
glm.pred = sapply(glm.probs, function (x) {ifelse(x > 0.5, 1, 0)})
table(glm.pred, Boston$crime[train])
mean(glm.pred = Boston$crime[train])
glm.probs = predict(glm.fit, newdata = testSet, type = "response")
glm.pred = sapply(glm.probs, function (x) {ifelse(x > 0.5, 1, 0)})
table(glm.pred, Boston$crime[!train])
mean(glm.pred = Boston$crime[!train])
testSet = Boston[-train,]
train.X = trainSet[,-c("crim", "crime")]
train.X = trainSet[,!c("crim", "crime")]
train.X = trainSet[,-"crim"]
names(Boston)
train.X = trainSet[,-c(1,15)]
train.X = trainSet[,-c(1,15)]
test.X = testSet[,-c(1,15)]
train.crime = Boston$crime[train]
set.seed(1)
knn.pred = knn(train.X, test.X, train.crime, k = 1)
table(knn.pred, Boston$crime[-train])
library(class)
train.X = trainSet[,-c(1,15)]
test.X = testSet[,-c(1,15)]
train.crime = Boston$crime[train]
set.seed(1)
knn.pred = knn(train.X, test.X, train.crime, k = 1)
table(knn.pred, Boston$crime[-train])
library(ISLR)
Auto$mpg01 = sapply(Auto$mpg, function(x) {ifelse(x > median(Auto$mpg), 1, 0)})
attach(Auto)
boxplot(acceleration, mpg01)
boxplot(acceleration)
boxplot(mpg01)
summary(mpg01)
Auto$mpg01 = sapply(Auto$mpg, function(x) {ifelse(x > median(Auto$mpg), 1, 0)})
Auto$mpg01 = as.factor(Auto$mpg01)
attach(Auto)
boxplot(mpg01, acceleration)
summary(mpg01)
shiny::runApp('Desktop/COLUMBIA/Intro to Databases/Project 1/NY-Bus-Routes-Guide/deploy-folder')
library(leaps)
cogito_ergo_sum()
cogito_ergo_sum
library(MASS)
data(birthwt)
birthwt[0:10,]
bwt <- with(birthwt, {
race <- factor(race, labels = c("white", "black", "other"))
ptd <- factor(ptl > 0)
ftv <- factor(ftv)
levels(ftv)[-(1:2)] <- "2+"
data.frame(low, age, lwt, race, smoke = (smoke > 0),
ptd, ht = (ht > 0), ui = (ui > 0), ftv)
})
colnames(bwt) <- c("below.2500", "mother.age",
"mother.weight", "race",
"smoke", "prem.labor",
"hypertension", "uterine",
"physician.visits")
bwt.grams <- with(birthwt, {
race <- factor(race, labels = c("white", "black", "other"))
ptd <- factor(ptl > 0)
ftv <- factor(ftv)
levels(ftv)[-(1:2)] <- "2+"
data.frame(bwt, age, lwt, race, smoke = (smoke > 0),
ptd, ht = (ht > 0), ui = (ui > 0), ftv)
})
colnames(bwt.grams) <- c("baby.grams", "mother.age",
"mother.weight", "race",
"smoke", "prem.labor",
"hypertension", "uterine",
"physician.visits")
nrow(bwt.grams)
sample(1:nrow(bwt.grams), floor(0.75*nrow(bwt.grams)))
train <- sample(1:nrow(bwt.grams), floor(0.75*nrow(bwt.grams)))
length(bwt.grams[train,])
nrow(bwt.grams[train,])
nrow(bwt.grams[-train,])
View(birthwt)
View(bwt.grams)
View(bwt)
attach(bwt.grams)
warnings()
plot(baby.grams, race)
boxplot(baby.grams ~ race)
boxplot(baby.grams ~ race, col = race)
sapply(race, function(x) {mean(baby.grams[race = x,])})
sapply(race, function(x) {mean(bwt.grams$baby.grams[race = x,])})
baby.grams[race == "white"]
sapply(race, function(x) {mean(bwt.grams$baby.grams[race == x,])})
sapply(race, function(x) {mean(baby.grams[race == x,])})
race
levels(race)
baby.grams
baby.grams[race = levels(race)[1]]
levels(race)[1]
baby.grams[race == levels(race)[1]]
mean(baby.grams[race == levels(race)[1]])
sapply(levels(race), function(x) {mean(baby.grams[race == x])})
points(sapply(levels(race), function(x) {mean(baby.grams[race == x])}))
boxplot(baby.grams ~ race, col = c(4,5,6))
points(sapply(levels(race), function(x) {mean(baby.grams[race == x])}), pch = "+")
boxplot(baby.grams ~ smoke, col = c(4,5))
points(sapply(levels(smoke), function(x) {mean(baby.grams[smoke == x])}), pch = "+")
levels(smoke)
points(sapply(c(T, F), function(x) {mean(baby.grams[smoke == x])}), pch = "+")
boxplot(baby.grams ~ prem.labor, col = c(4,5))
points(sapply(c(T, F), function(x) {mean(baby.grams[prem.labor == x])}), pch = "+")
boxplot(baby.grams ~ uterine, col = c(4,5))
points(sapply(c(T, F), function(x) {mean(baby.grams[uterine == x])}), pch = "+")
boxplot(baby.grams ~ physician.visits, col = c(4,5,6))
points(sapply(levels(physician.visits), function(x) {mean(baby.grams[physician.visits == x])}), pch = "+")
plot(baby.grams, mother.weight)
library(car)
scatterplot(baby.grams ~ mother.weight | race)
scatterplot(baby.grams ~ mother.weight)
pairs(baby.grams, mother.age, mother.weight)
pairs(cbind(baby.grams, mother.age, mother.weight))
cor(baby.grams, mother.age, mother.weight)
cor(cdind(baby.grams, mother.age, mother.weight))
cor(cbind(baby.grams, mother.age, mother.weight))
install.packages("scatterplot3d")
library(scatterplot3d)
scatterplot3d(baby.grams, mother.age, mother.weight, color = race)
scatterplot3d(baby.grams, mother.age, mother.weight)
scatterplot3d(baby.grams, mother.age, mother.weight, pch = "+")
scatterplot3d(baby.grams, mother.age, mother.weight, pch = 19)
log.fit = glm( below.2500~ mother.weight+race+smoke+hypertension+uterine, family = binomial, data=bwt[train,])
pred <- predict(log.fit, newdata = bwt[-train,])
table(pred, bwt$below.2500[-train])
pred
summary(log.fit)
predict.glm(log.fit, bwt$below.2500[-train])
predict.glm(log.fit, newdata = bwt$below.2500[-train])
pred <- predict(log.fit, newdata = bwt[-train,])
pred
pred <- predict(log.fit, newdata = bwt[-train,], type = "response")
pred
pred.train <- predict(log.fit, type = "response")
length(pred.train)
pred.train <- sapply(pred.train, function(x) { ifelse(x > 0.5, 1, 0)})
table(pred.train, bwt$below.2500[train,])
table(pred.train, bwt$below.2500[train])
pred.train <- sapply(pred.train, function(x) { ifelse(x > 0.3, 1, 0)})
table(pred.train, bwt$below.2500[train])
pred.train <- sapply(pred.train, function(x) { ifelse(x > 0.1, 1, 0)})
table(pred.train, bwt$below.2500[train])
pred.train <- sapply(pred.train, function(x) { ifelse(x > 0.9, 1, 0)})
table(pred.train, bwt$below.2500[train])
pred.train
mean(pred.train)
pred.train <- sapply(pred.train, function(x) { ifelse(x > 0.1, 1, 0)})
mean(pred.train)
pred.train <- sapply(pred, function(x) { ifelse(x > 0.1, 1, 0)})
mean(pred.train)
table(pred.train, bwt$below.2500[train])
table(pred.train, bwt$below.2500[train])
length(pred.train)
length(pred)
pred.train <- predict(log.fit, type = "response")
low.train <- sapply(pred.train, function(x) {ifelse(x > 0.5, 1, 0)})
length(low.train)
mean(low.train)
table(low.train, bwt$below.2500[train])
low.train <- sapply(pred.train, function(x) {ifelse(x > 0.3, 1, 0)})
table(low.train, bwt$below.2500[train])
low.train <- sapply(pred.train, function(x) {ifelse(x > 0.1, 1, 0)})
table(low.train, bwt$below.2500[train])
low.train <- sapply(pred.train, function(x) {ifelse(x > 0.7, 1, 0)})
table(low.train, bwt$below.2500[train])
low.train <- sapply(pred.train, function(x) {ifelse(x > 0.5, 1, 0)})
table(low.train, bwt$below.2500[train])
mean(low.train == bwt$below.2500[train])
rm(pred)
pred.test <- predict(log.fit, newdata = bwt[-train, -1], type = "response")
low.test <- sapply(pred.test, function(x) {ifelse(x > 0.5, 1, 0)})
table(pred.test, bwt$below.2500[-train])
table(low.test, bwt$below.2500[-train])
mean(low.test == bwt$below.2500[-train])
scatterplot3d(baby.grams, mother.age, mother.weight)
scatterplot3d(baby.grams, mother.age, mother.weight, col = race)
scatterplot3d(baby.grams, mother.age, mother.weight, color =  = race)
scatterplot3d(baby.grams, mother.age, mother.weight, color = race)
scatterplot3d(baby.grams, mother.age, mother.weight, color = c(1,2,3))
race
levels(race)
raceCol <- rep("red", length(race))
raceCol[race == "black"] <- "blue"
raceCol[race == "other"] <- "green"
scatterplot3d(baby.grams, mother.age, mother.weight, color = race)
scatterplot3d(baby.grams, mother.age, mother.weight, color = raceCol)
plot(baby.grams, mother.age, col = race)
plot(baby.grams, mother.age, col = smoke)
plot(baby.grams, mother.age, col = prem.labor)
plot(baby.grams, mother.weight, col = prem.labor)
plot(baby.grams, mother.weight, col = race)
plot(baby.grams, mother.weight, col = physician.visits)
plot(baby.grams, mother.weight)
plot(baby.grams, log(mother.weight))
plot(baby.grams, log(mother.weight), col = smoke)
plot(baby.grams, log(mother.weight), col = prem.labor)
plot(baby.grams, log(mother.age), col = prem.labor)
plot(log(mother.age), baby.grams, col = prem.labor)
plot(log(mother.weight), baby.grams, col = prem.labor)
plot(log(mother.weight), baby.grams, col = race)
library(ggplot2)
bw <- ggplot(bwt.grams, aes(mother.weight, baby.grams, colour = factor(race))) + geom_point()
bw
bw <- ggplot(bwt.grams, aes(mother.weight, baby.grams, colour = race)) + geom_point()
bw
bw + facet_grid(. ~ race, scales = "free")
bw + facet_grid(smoke ~ race, scales = "free")
scbw <- ggplot(bwt.grams, aes(mother.weight, baby.grams, color = race)) + point()
scbw <- ggplot(bwt.grams, aes(mother.weight, baby.grams, color = race)) + geom_point()
scbw
scbw2 <- ggplot(bwt.grams, aes(mother.age, baby.grams, color = race)) + geom_point()
scbw2
class(bwt.grams)
sapply(bwt.grams, class)
library(GGally)
ggpairs(bwt.grams, color = race, alpha = 0.4)
ggpairs(bwt.grams, color = 'race', alpha = 0.4)
ggpairs(bwt.grams, alpha = 0.4)
sapply(bwt.grams, class)
sapply(bwt.grams, class) == "logical"
bwt.grams[,sapply(bwt.grams, class) == "logical"]
bwt.grams[,sapply(bwt.grams, class) == "logical"] <- as.factor(bwt.grams[,sapply(bwt.grams, class) == "logical"])
bwt.grams[,sapply(bwt.grams, class) == "logical"]
bwt.grams1 <- bwt.grams
bwt.grams1[,sapply(bwt.grams1, class) == "logical"]
bwt.grams1$smoke <- as.factor(bwt.grams1$smoke)
bwt.grams1$hypertension <- as.factor(bwt.grams1$hypertension)
bwt.grams1$uterine <- as.factor(bwt.grams1$uterine)
ggpairs(bwt.grams1)
ggpairs(bwt.grams1, color = 'race', alpha = 0.4)
getwd()
setwd("Downloads/scirep-cuisines-detail")
recipes <- read.csv("epic_recipes.csv", header = F, stringsAsFactors = F, sep = ";")
View(recipes)
library(dplyr)
print(recipes)
View(recipes)
library(dplyr)
summarise(recipes)
head(recipes)
for i in [1:nrow(recipes)] {
print(i)
}
for i in [1:nrow(recipes)] {
print(i)
}
for (i in [1:nrow(recipes)]) {
print(i)
}
for (i in 1:nrow(recipes)) {
print(i)
}
table(unlist(recipes[,-1]))
t(table(unlist(recipes[,-1])))
table(unlist(recipes[,-1]))
ingredients <- table(unlist(recipes[,-1]))
ingredients <- data.frame(table(unlist(recipes[,-1])))
View(ingredients)
ingredients <- ingredients[-1,]
names(ingredients) <- c('ingredient', 'count')
table(recipes[,1]~ingredients$ingredient)
unique(recipes$V1)
vignette("window-functions")
table(recipes[,1]~ingredients$ingredient)
rm(list = "ls")
rm(list = ls(
))
rm(list = ls())
ls()
?ls
filename<-"Survey+Response.xlsx"
source("tidydata.R")
df<-tidydata(filename)
list.files()
list.files()
getwd*
getwd()
getwd()
setwd("../../Desktop/COLUMBIA/Visualization/EDAV_Project_Class")
list.files()
filename<-"Survey+Response.xlsx"
source("tidydata.R")
df<-tidydata(filename)
View(df)
library(foreign)
??Foreign
skills <- cleanData[,12:31]
skills[is.na(skills)] <- 0
skills <- df[,12:31]
skills[is.na(skills)] <- 0
View(skills)
names(skills)
View(df)
names(df)
unique(df$Program)
type(df$Programming.and.Analytical.Experiences..R..data.manipulation.and.modeling.)
class(df$Programming.and.Analytical.Experiences..R..data.manipulation.and.modeling.)
levels(df$Programming.and.Analytical.Experiences..R..data.manipulation.and.modeling.)
average(c(1,2,3))
mean(c(1,2,3))
sapply(df$Program, function(x) {mean(df[df$Program == x,4])})
mean(df[df$Program == 'IDSE (master)',4])
df[df$Program == 'IDSE (master)',4]
mean(df$Programming.and.Analytical.Experiences..R..data.manipulation.and.modeling.)
mean(as.numeric(df$Programming.and.Analytical.Experiences..R..data.manipulation.and.modeling.))
sapply(df$Program, function(x) {mean(as.numeric(df[df$Program == x,4]))})
sapply(unique(df$Program), function(x) {mean(as.numeric(df[df$Program == x,4]))})
avg_R_skill <- sapply(unique(df$Program), function(x) {mean(as.numeric(df[df$Program == x,4]))})
names(avg_R_skill) <- unique(df$Program)
avg_R_skill
names(df)
avg_Matlab_skill <- sapply(unique(df$Program), function(x) {mean(as.numeric(df[df$Program == x,10]))})
names(avg_Matlab_skill) <- unique(df$Program)
t(avg_Matlab_skill)
cbind(t(avg_Matlab_skill), t(avg_R_skill))
cbind(avg_Matlab_skill, avg_R_skill)
bubble_table <- cbind(avg_Matlab_skill, avg_R_skill)
View(bubble_table)
sapply(unique(df$Program), function(x) {nrow(df[df$Program == x,])})
size <- sapply(unique(df$Program), function(x) {nrow(df[df$Program == x,])})
names(size) <- unique(df$Program)
bubble_table <- cbind(bubble_table, size)
View(bubble_table)
class(bubble_table)
library(ggplot2)
row.names(bubble_table)
bplot <- ggplot(bubble_table, aes(x = avg_R_skill, y = avg_Matlab_skill, size = size, label = row.names(bubble_table)), guide = FALSE)
bubble_table2 <- as.data.frame(bubble_table)
View(bubble_table2)
bplot <- ggplot(bubble_table2, aes(x = avg_R_skill, y = avg_Matlab_skill, size = size, label = row.names(bubble_table2)), guide = FALSE)
bplot
bplot
bplot + geom_point(colour="white", fill="red", shape=21)+ scale_size_area(max_size = 15)
bubble_table2$program <- row.names(bubble_table2)
View(bubble_table2)
bplot <- ggplot(bubble_table2, aes(x = avg_R_skill, y = avg_Matlab_skill, size = size, label = program), guide = FALSE)
bplot + geom_point(colour="white", fill="red", shape=21)+ scale_size_area(max_size = 15)
bplot + geom_point(colour="white", fill="red", shape=21)
bplot + geom_point(colour="white", fill="red", shape=21)+ scale_size_area(max_size = 15)
bplot + geom_point(colour="white", fill="red", shape=21)+ scale_size_area(max_size = 20)
class(bubble_table2$program)
names(bubble_table2)
bplot + geom_point(colour="white", fill="red", shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 4)
bplot + geom_point(colour="white", fill="red", shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 3)
bplot + geom_point(colour="white", fill="red", shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 2)
bplot + geom_point(colour="white", fill="red", shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 2) + theme_bw()
bplot + geom_point(colour="white", fill="red", shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 2) + theme_light()
bplot + geom_point(colour="white", fill="red", shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 2)
bplot + geom_point(alpha = 0.8, shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 2) + scale_colour_brewer(palette="Spectral", type="qual",name="test")
bplot <- ggplot(bubble_table2, aes(x = avg_R_skill, y = avg_Matlab_skill, size = size, label = program, colour = program), guide = FALSE)
bplot + geom_point(alpha = 0.8, shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 2) + scale_colour_brewer(palette="Spectral", type="qual",name="test")
bplot + geom_point(alpha = 0.8, shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 2) + scale_colour_brewer(palette="Spectral", type="qual",name="Program")
bplot + geom_point(alpha = 0.8, fill = program,shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 2) + scale_colour_brewer(palette="Spectral", type="qual",name="Program")
bplot + geom_point(alpha = 0.8, fill = bubble_table2$program,shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 2) + scale_colour_brewer(palette="Spectral", type="qual",name="Program")
bplot + geom_point(alpha = 0.8,shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 2) + scale_colour_brewer(palette="Spectral", type="qual",name="Program")
bplot <- ggplot(bubble_table2, aes(x = avg_R_skill, y = avg_Matlab_skill, size = size, label = program, colour = program))
bplot + geom_point(alpha = 0.8,shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 2) + scale_colour_brewer(palette="Spectral", type="qual",name="Program")
bplot + geom_point(alpha = 0.8,shape=21, guide='none')+ scale_size_area(max_size = 20) + geom_text(size = 2) + scale_colour_brewer(palette="Spectral", type="qual",name="Program")
bplot + geom_point(alpha = 0.8,shape=21, guide='none')+ scale_size_area(max_size = 20) + geom_text(size = 2) + scale_colour_brewer(palette="Spectral", type="qual",name="Program") + guides(colour = guide_legend(override.aes = list(alpha = 1)))
bplot + geom_point(alpha = 0.8,shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 2) + scale_colour_brewer(palette="Spectral", type="qual",name="Program") + guides(colour = guide_legend(override.aes = list(alpha = 1)))
bplot + geom_point(alpha = 0.8,shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 4) + scale_colour_brewer(palette="Spectral", type="qual",name="Program") + guides(colour = guide_legend(override.aes = list(alpha = 1)))
bplot + geom_point(alpha = 0.8,shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 4) + scale_colour_brewer(palette="Spectral", type="qual",name="Program") + guides(colour = guide_legend(override.aes = list(alpha = 1)))+scale_size_area(max_size = 15)
bplot + geom_point(alpha = 0.8,shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 4) + scale_colour_brewer(palette="Spectral", type="qual",name="Program") + guides(colour = guide_legend(override.aes = list(alpha = 1)))+scale_size_area(max_size = 20)
bplot + geom_point(alpha = 0.8,shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 4) + scale_colour_brewer(palette="Spectral", type="qual",name="Program") + guides(colour = guide_legend(override.aes = list(alpha = 1)))+scale_size_area(max_size = 25)
bplot + geom_point(alpha = 0.8,shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 4) + scale_colour_brewer(palette=3, type="qual",name="Program") + guides(colour = guide_legend(override.aes = list(alpha = 1)))+scale_size_area(max_size = 25)
bplot + geom_point(alpha = 0.8,shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 4) + scale_colour_brewer(palette=1, type="qual",name="Program") + guides(colour = guide_legend(override.aes = list(alpha = 1)))+scale_size_area(max_size = 25)
bplot + geom_point(alpha = 0.8,shape=21)+ scale_size_area(max_size = 20) + geom_text(size = 4) + scale_colour_brewer(palette=2, type="qual",name="Program") + guides(colour = guide_legend(override.aes = list(alpha = 1)))+scale_size_area(max_size = 25)
names(df)
df[1,2]
View(df)
df[1,3]
View(bubble_table2)
skills[is.na(skills)] <- 0
